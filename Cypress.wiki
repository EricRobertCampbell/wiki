= Cypress =
[[https://www.cypress.io/|Homepage]]

== Installing ==
`npm install cypress`

== Test Template ==
- Basic template for a test (`somestuff.spec.js` in the `cypress/tests` directory)
{{{javascript
describe('Something that I care about', () => {
	it('Should do a thing', () => {
		expect(true).to.equal(true);
		})
	})
}}}

== Running ==
`npx cypress open`

- You can also add it to the `scripts` part of your package.json:
	{{{json
	  {
		  "scripts": {
			  "cypress:open": "cypress open"
		  }
	  }
	}}}
	- Then we can run it with `npm run cypress:open`

== Setting Up Tests ==
{{{javascript
describe('Something that is important', () => {
		beforeEach(() => {
		... something that should be run before EACH test
				})
		}
}}}
- `before(() => {})`:
	- Run once before all of the tests in the suite
- `beforeEach(() => {})`:
	- Run before each test in the suite
- `after(() => {})`:
	- run after all test in the suite are completed
- `afterEach(() => {})`:
	- run after each test in the suite is completed

== Command Line Tools ==
[[https://docs.cypress.io/guides/guides/command-line.html#cypress-run|Documentation]]


== Tests ==
`describe` and `it` come from [[Mocha]]
`expect` comes from [[Chai]]

== Commands ==
- Access commands from the `cy` object (so `cy.contains('type')`, &c.)

- `cy.contains('content')` - gets an element that has content as a string (substring)
	- `cy.contains('content')`
	- `cy.contains('content', options)`
	- `cy.contains(selector, 'content'`
	- &c. (there are lots more)
- `.click()` - simulates a click on the element that was just found
- `.pause()` - pauses the process and provides an interface for either resuming the entire operation or stepping through one command at a time
- `.should()` - assertion like
	- `.should(chainer)`
	- `.should(chainer, value)`
	{{{javascript
	cy.contains('login').should('be.visible')
	}}}
	- Chainers are valid [[Chai]], [[Chai-jQuery]], or [[Sinon-Chai]] chainers
		- e.g. [[https://docs.cypress.io/guides/references/assertions.html#Chai|here]]

== Configuration ==
- `cypress.json` in the project directory
- Base url: 
  {{{json
  {
  	"baseUrl": "http://localhost:3000"
  }
  }}}
	- Will prefix any `cy.visit()` and `cy.request()` commands with this
	- e.g. `cy.visit("/")` will take you to the homepage

== Single Sign-on Authentication ==
[[https://github.com/cypress-io/cypress-example-recipes/tree/master/examples/logging-in__single-sign-on|Cypress Recipe]]
[[https://www.youtube.com/watch?v=5XQOK0v_YRE|Video]]
[[cypress-social-logins]]

== Environment Variables ==
[[https://docs.cypress.io/guides/guides/environment-variables.html#Option-1-configuration-file|Guide Here]]
- During the test, you can access environment variables using `Cypress.env(key)`
- There are five different ways to declare environment variables:
1. In the configuration file (`cypress.json`)
	- add an `env` key:
	{{{json
	  {
		  "env": {
			  "login_url": "/login"
		  }
	  }
	}}}
	- You would access this as `Cypress.env('login_url')`
5. Creating a `cypress.env.json`
6. Export as `CYPRESS_*`
7. Pass in the CLI as `--env`
8. Set an environment variable within the plugins
9. Set the environment variable within test configuration
	- You can also pass in the `env` to a given suite of tests (`describe`) or a single test (`it`):
	{{{javascript
	describe('test against Spanish site', {
		env: {
			language: 'es'
		}
	})
	}}}

== cy.task() ==
[[https://docs.cypress.io/api/commands/task.html#Syntax|Documentation Here]]

- Syntax:
	- `ct.task(event)`
	- `cy.task(event, arg)`
	- `cy.task(event, arg, options)`

- In the test:
	{{{javascript
	cy.task('log', 'This will be output to terminal')
	}}}
- In the plugins file (`plugins/index.js`):
	{{{javascript
	module.exports = (on, config) => {
		on('task', {
			log(message) {
				console.log(message)
					  
				return null
			  }
		})
	}
	}}}
	
== Network Requests ==
{{{javascript
cy.request(url)
cy.request(url, body)
cy.request(method, url)
cy.request(method, url, body)
cy.request(options)
}}}
	
== Configuration ==
- `pluginsFile`: `cypress/plugins/index.js`
	- Path to the plugins file

== Plugins and Extensions ==
=== testing-library/cypress ===
[[https://github.com/testing-library/cypress-testing-library|Github]]

- Install with `npm install --save-dev @testing-library/cypress`
- Add the following line to `cypress/support/commands.js`:
	- `import @testing-library/cypress/add-commands`
	- Now we can use all of the regular testing library commands!

=== cypress-react-unit-test ===
[[https://github.com/bahmutov/cypress-react-unit-test|Github]]
